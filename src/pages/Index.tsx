import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';

interface Story {
  id: string;
  title: string;
  emoji: string;
  description: string;
  content: string;
}

interface Question {
  id: number;
  question: string;
  options: string[];
  correct: number;
  story: string;
}

const stories: Story[] = [
  {
    id: 'kolobok',
    title: '–ö–æ–ª–æ–±–æ–∫',
    emoji: 'ü•Æ',
    description: '–°–∫–∞–∑–∫–∞ –æ —Ä—É–º—è–Ω–æ–º –∫–æ–ª–æ–±–∫–µ, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞—Ç–∏–ª—Å—è –æ—Ç –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏',
    content: '–ñ–∏–ª–∏-–±—ã–ª–∏ —Å—Ç–∞—Ä–∏–∫ —Å–æ —Å—Ç–∞—Ä—É—Ö–æ–π. –í–æ—Ç –∏ –≥–æ–≤–æ—Ä–∏—Ç —Å—Ç–∞—Ä–∏–∫ —Å—Ç–∞—Ä—É—Ö–µ: ‚Äî –ü–æ–¥–∏-–∫–∞, —Å—Ç–∞—Ä—É—Ö–∞, –ø–æ –∫–æ—Ä–æ–±—É –ø–æ—Å–∫—Ä–µ–±–∏, –ø–æ —Å—É—Å–µ–∫—É –ø–æ–º–µ—Ç–∏, –Ω–µ –Ω–∞—Å–∫—Ä–µ–±—ë—à—å –ª–∏ –º—É–∫–∏ –Ω–∞ –∫–æ–ª–æ–±–æ–∫...'
  },
  {
    id: 'repka',
    title: '–†–µ–ø–∫–∞',
    emoji: 'ü•ï',
    description: '–ò—Å—Ç–æ—Ä–∏—è –æ —Ç–æ–º, –∫–∞–∫ –≤—Å—è —Å–µ–º—å—è —Ç—è–Ω—É–ª–∞ –±–æ–ª—å—à—É—é-–ø—Ä–µ–±–æ–ª—å—à—É—é —Ä–µ–ø–∫—É',
    content: '–ü–æ—Å–∞–¥–∏–ª –¥–µ–¥ —Ä–µ–ø–∫—É –∏ –≥–æ–≤–æ—Ä–∏—Ç: ‚Äî –†–∞—Å—Ç–∏, —Ä–∞—Å—Ç–∏, —Ä–µ–ø–∫–∞, —Å–ª–∞–¥–∫–∞! –†–∞—Å—Ç–∏, —Ä–∞—Å—Ç–∏, —Ä–µ–ø–∫–∞, –∫—Ä–µ–ø–∫–∞! –í—ã—Ä–æ—Å–ª–∞ —Ä–µ–ø–∫–∞ —Å–ª–∞–¥–∫–∞, –∫—Ä–µ–ø–∫–∞, –±–æ–ª—å—à–∞—è-–ø—Ä–µ–±–æ–ª—å—à–∞—è...'
  },
  {
    id: 'teremok',
    title: '–¢–µ—Ä–µ–º–æ–∫',
    emoji: 'üè†',
    description: '–°–∫–∞–∑–∫–∞ –æ –∑–≤–µ—Ä–∏–Ω—ã—Ö —Å–æ—Å–µ–¥—è—Ö –≤ —Ç–µ—Ä–µ–º–∫–µ',
    content: '–°—Ç–æ–∏—Ç –≤ –ø–æ–ª–µ —Ç–µ—Ä–µ–º–æ–∫. –ë–µ–∂–∏—Ç –º–∏–º–æ –º—ã—à–∫–∞-–Ω–æ—Ä—É—à–∫–∞. –£–≤–∏–¥–µ–ª–∞ —Ç–µ—Ä–µ–º–æ–∫, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: ‚Äî –¢–µ—Ä–µ–º-—Ç–µ—Ä–µ–º–æ–∫! –ö—Ç–æ –≤ —Ç–µ—Ä–µ–º–µ –∂–∏–≤—ë—Ç?...'
  },
  {
    id: 'ryaba',
    title: '–ö—É—Ä–æ—á–∫–∞ –†—è–±–∞',
    emoji: 'üêî',
    description: '–°–∫–∞–∑–∫–∞ –æ –∫—É—Ä–æ—á–∫–µ, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–µ—Å–ª–∞ –∑–æ–ª–æ—Ç–æ–µ —è–∏—á–∫–æ',
    content: '–ñ–∏–ª–∏-–±—ã–ª–∏ –¥–µ–¥ –¥–∞ –±–∞–±–∞. –ò –±—ã–ª–∞ —É –Ω–∏—Ö –∫—É—Ä–æ—á–∫–∞ —Ä—è–±–∞. –°–Ω–µ—Å–ª–∞ –∫—É—Ä–æ—á–∫–∞ —è–∏—á–∫–æ, –¥–∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ ‚Äî –∑–æ–ª–æ—Ç–æ–µ...'
  }
];

const questions: Question[] = [
  {
    id: 1,
    question: '–û—Ç –∫–æ–≥–æ —É–∫–∞—Ç–∏–ª—Å—è –ö–æ–ª–æ–±–æ–∫ –ø–µ—Ä–≤—ã–º?',
    options: ['–û—Ç –∑–∞–π—Ü–∞', '–û—Ç –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏', '–û—Ç –≤–æ–ª–∫–∞', '–û—Ç –º–µ–¥–≤–µ–¥—è'],
    correct: 1,
    story: 'kolobok'
  },
  {
    id: 2,
    question: '–ö—Ç–æ –ø–æ–º–æ–≥ –≤—ã—Ç—è–Ω—É—Ç—å —Ä–µ–ø–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏–º?',
    options: ['–ö–æ—à–∫–∞', '–í–Ω—É—á–∫–∞', '–ú—ã—à–∫–∞', '–ñ—É—á–∫–∞'],
    correct: 2,
    story: 'repka'
  },
  {
    id: 3,
    question: '–ö—Ç–æ –ø–µ—Ä–≤—ã–º –ø–æ—Å–µ–ª–∏–ª—Å—è –≤ —Ç–µ—Ä–µ–º–∫–µ?',
    options: ['–õ—è–≥—É—à–∫–∞', '–ú—ã—à–∫–∞-–Ω–æ—Ä—É—à–∫–∞', '–ó–∞–π—á–∏–∫', '–õ–∏—Å–∏—á–∫–∞'],
    correct: 1,
    story: 'teremok'
  },
  {
    id: 4,
    question: '–ö–∞–∫–æ–µ —è–∏—á–∫–æ —Å–Ω–µ—Å–ª–∞ –ö—É—Ä–æ—á–∫–∞ –†—è–±–∞?',
    options: ['–°–µ—Ä–µ–±—Ä—è–Ω–æ–µ', '–ü—Ä–æ—Å—Ç–æ–µ', '–ó–æ–ª–æ—Ç–æ–µ', '–†–∞—Å–ø–∏—Å–Ω–æ–µ'],
    correct: 2,
    story: 'ryaba'
  }
];

export default function Index() {
  const [activeSection, setActiveSection] = useState<'home' | 'stories' | 'quiz' | 'games'>('home');
  const [selectedStory, setSelectedStory] = useState<Story | null>(null);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [quizFinished, setQuizFinished] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [puzzleMatches, setPuzzleMatches] = useState<number>(0);

  const handleQuizAnswer = (answerIndex: number) => {
    setSelectedAnswer(answerIndex);
    if (answerIndex === questions[currentQuestion].correct) {
      setScore(score + 1);
    }
    
    setTimeout(() => {
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
        setSelectedAnswer(null);
      } else {
        setQuizFinished(true);
      }
    }, 1000);
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setScore(0);
    setQuizFinished(false);
    setSelectedAnswer(null);
  };

  const handlePuzzleClick = (heroId: number) => {
    if (heroId === puzzleMatches) {
      setPuzzleMatches(puzzleMatches + 1);
    }
  };

  const renderHome = () => (
    <div className="min-h-screen bg-gradient-to-b from-yellow-50 via-orange-50 to-red-50">
      <div className="container mx-auto px-4 py-12">
        <div className="text-center mb-12 animate-fade-in">
          <div className="mb-6 text-8xl animate-bounce-soft">üìö</div>
          <h1 className="text-5xl md:text-7xl font-bold text-primary mb-4 drop-shadow-lg">
            –†—É—Å—Å–∫–∏–µ –Ω–∞—Ä–æ–¥–Ω—ã–µ —Å–∫–∞–∑–∫–∏
          </h1>
          <p className="text-xl md:text-2xl text-muted-foreground max-w-2xl mx-auto">
            –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏, –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –∏–≥—Ä—ã –¥–ª—è —Ç—Ä–µ—Ç—å–µ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto">
          <Card 
            className="cursor-pointer hover:scale-105 transition-transform duration-300 border-4 border-primary bg-white shadow-xl"
            onClick={() => setActiveSection('stories')}
          >
            <CardHeader className="text-center">
              <div className="text-6xl mb-4">üìñ</div>
              <CardTitle className="text-2xl">–°–∫–∞–∑–∫–∏</CardTitle>
              <CardDescription>–ß–∏—Ç–∞–π –ª—é–±–∏–º—ã–µ –∏—Å—Ç–æ—Ä–∏–∏</CardDescription>
            </CardHeader>
          </Card>

          <Card 
            className="cursor-pointer hover:scale-105 transition-transform duration-300 border-4 border-secondary bg-white shadow-xl"
            onClick={() => setActiveSection('quiz')}
          >
            <CardHeader className="text-center">
              <div className="text-6xl mb-4">üéØ</div>
              <CardTitle className="text-2xl">–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</CardTitle>
              <CardDescription>–ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è</CardDescription>
            </CardHeader>
          </Card>

          <Card 
            className="cursor-pointer hover:scale-105 transition-transform duration-300 border-4 border-accent bg-white shadow-xl"
            onClick={() => setActiveSection('games')}
          >
            <CardHeader className="text-center">
              <div className="text-6xl mb-4">üéÆ</div>
              <CardTitle className="text-2xl">–ò–≥—Ä—ã</CardTitle>
              <CardDescription>–ò–≥—Ä–∞–π –∏ —É—á–∏—Å—å</CardDescription>
            </CardHeader>
          </Card>

          <Card 
            className="cursor-pointer hover:scale-105 transition-transform duration-300 border-4 border-green-400 bg-white shadow-xl"
          >
            <CardHeader className="text-center">
              <div className="text-6xl mb-4">‚≠ê</div>
              <CardTitle className="text-2xl">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</CardTitle>
              <CardDescription>–¢–≤–æ–∏ —É—Å–ø–µ—Ö–∏</CardDescription>
            </CardHeader>
          </Card>
        </div>

        <div className="mt-16 text-center">
          <div className="inline-block border-4 border-amber-600 rounded-lg p-6 bg-white shadow-xl">
            <div className="text-6xl mb-3">üé≠</div>
            <p className="text-lg text-gray-700 font-semibold">
              –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –∏ –Ω–∞—á–Ω–∏ —Å–≤–æ—ë —Å–∫–∞–∑–æ—á–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!
            </p>
          </div>
        </div>
      </div>
    </div>
  );

  const renderStories = () => (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-purple-50">
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-between mb-8">
          <Button 
            onClick={() => {
              setActiveSection('home');
              setSelectedStory(null);
            }}
            variant="outline"
            size="lg"
            className="border-2"
          >
            <Icon name="Home" className="mr-2" />
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Button>
          <h2 className="text-4xl font-bold text-primary">üìñ –°–∫–∞–∑–∫–∏</h2>
          <div className="w-32"></div>
        </div>

        {!selectedStory ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto">
            {stories.map((story) => (
              <Card 
                key={story.id}
                className="cursor-pointer hover:scale-105 transition-transform duration-300 border-4 border-primary bg-white shadow-xl"
                onClick={() => setSelectedStory(story)}
              >
                <CardHeader>
                  <div className="text-7xl text-center mb-4">{story.emoji}</div>
                  <CardTitle className="text-3xl text-center">{story.title}</CardTitle>
                  <CardDescription className="text-center text-lg pt-2">
                    {story.description}
                  </CardDescription>
                </CardHeader>
                <CardContent className="text-center">
                  <Button className="w-full" size="lg">
                    –ß–∏—Ç–∞—Ç—å —Å–∫–∞–∑–∫—É
                    <Icon name="BookOpen" className="ml-2" />
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          <Card className="max-w-3xl mx-auto border-4 border-primary bg-white shadow-2xl">
            <CardHeader>
              <div className="flex items-center justify-between mb-4">
                <Button 
                  onClick={() => setSelectedStory(null)}
                  variant="outline"
                >
                  <Icon name="ArrowLeft" className="mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
                <div className="text-6xl">{selectedStory.emoji}</div>
              </div>
              <CardTitle className="text-4xl text-center">{selectedStory.title}</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-xl leading-relaxed text-gray-700 whitespace-pre-wrap">
                {selectedStory.content}
              </p>
              <div className="mt-8 p-6 bg-amber-50 rounded-lg border-2 border-amber-300">
                <p className="text-lg font-semibold text-center">
                  ‚ú® –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç... ‚ú®
                </p>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );

  const renderQuiz = () => (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-blue-50">
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-between mb-8">
          <Button 
            onClick={() => setActiveSection('home')}
            variant="outline"
            size="lg"
            className="border-2"
          >
            <Icon name="Home" className="mr-2" />
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Button>
          <h2 className="text-4xl font-bold text-secondary">üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞</h2>
          <div className="w-32"></div>
        </div>

        <Card className="max-w-2xl mx-auto border-4 border-secondary bg-white shadow-2xl">
          {!quizFinished ? (
            <>
              <CardHeader>
                <div className="flex justify-between items-center mb-4">
                  <div className="text-lg font-semibold bg-primary text-white px-4 py-2 rounded-full">
                    –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
                  </div>
                  <div className="text-lg font-semibold bg-accent text-white px-4 py-2 rounded-full">
                    –°—á—ë—Ç: {score}
                  </div>
                </div>
                <CardTitle className="text-2xl text-center pt-4">
                  {questions[currentQuestion].question}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {questions[currentQuestion].options.map((option, index) => (
                  <Button
                    key={index}
                    onClick={() => handleQuizAnswer(index)}
                    disabled={selectedAnswer !== null}
                    className={`w-full text-lg py-6 ${
                      selectedAnswer === index
                        ? index === questions[currentQuestion].correct
                          ? 'bg-green-500 hover:bg-green-500'
                          : 'bg-red-500 hover:bg-red-500'
                        : ''
                    }`}
                    variant={selectedAnswer === null ? 'outline' : 'default'}
                    size="lg"
                  >
                    {option}
                  </Button>
                ))}
              </CardContent>
            </>
          ) : (
            <CardContent className="text-center py-12">
              <div className="text-8xl mb-6">
                {score === questions.length ? 'üèÜ' : score >= questions.length / 2 ? 'üåü' : 'üìö'}
              </div>
              <h3 className="text-4xl font-bold mb-4">
                {score === questions.length 
                  ? '–û—Ç–ª–∏—á–Ω–æ!' 
                  : score >= questions.length / 2 
                  ? '–•–æ—Ä–æ—à–æ!' 
                  : '–ú–æ–ª–æ–¥–µ—Ü!'}
              </h3>
              <p className="text-2xl mb-8">
                –¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤
              </p>
              <Button onClick={resetQuiz} size="lg" className="text-xl px-8 py-6">
                –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞
                <Icon name="RotateCcw" className="ml-2" />
              </Button>
            </CardContent>
          )}
        </Card>
      </div>
    </div>
  );

  const renderGames = () => (
    <div className="min-h-screen bg-gradient-to-b from-purple-50 to-pink-50">
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-between mb-8">
          <Button 
            onClick={() => setActiveSection('home')}
            variant="outline"
            size="lg"
            className="border-2"
          >
            <Icon name="Home" className="mr-2" />
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </Button>
          <h2 className="text-4xl font-bold text-accent">üéÆ –ò–≥—Ä—ã</h2>
          <div className="w-32"></div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto">
          <Card className="border-4 border-accent bg-white shadow-xl">
            <CardHeader>
              <CardTitle className="text-3xl text-center">üß© –£–≥–∞–¥–∞–π –≥–µ—Ä–æ—è</CardTitle>
              <CardDescription className="text-center text-lg">
                –ù–∞–π–¥–∏ –≥–µ—Ä–æ–µ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center mb-6">
                <div className="inline-block bg-accent text-white px-6 py-3 rounded-full text-xl font-bold">
                  –ù–∞–π–¥–µ–Ω–æ: {puzzleMatches} –∏–∑ 4
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                {[
                  { id: 0, emoji: 'ü•Æ', name: '–ö–æ–ª–æ–±–æ–∫' },
                  { id: 1, emoji: 'ü•ï', name: '–†–µ–ø–∫–∞' },
                  { id: 2, emoji: 'üè†', name: '–¢–µ—Ä–µ–º–æ–∫' },
                  { id: 3, emoji: 'üêî', name: '–ö—É—Ä–æ—á–∫–∞' }
                ].map((hero) => (
                  <Button
                    key={hero.id}
                    onClick={() => handlePuzzleClick(hero.id)}
                    disabled={hero.id < puzzleMatches}
                    className={`h-32 text-5xl ${
                      hero.id < puzzleMatches 
                        ? 'bg-green-100 cursor-not-allowed' 
                        : hero.id === puzzleMatches 
                        ? 'bg-white hover:bg-yellow-100 animate-bounce-soft' 
                        : 'bg-gray-100 cursor-not-allowed'
                    }`}
                    variant="outline"
                  >
                    {hero.id < puzzleMatches ? '‚úÖ' : hero.emoji}
                  </Button>
                ))}
              </div>
              {puzzleMatches === 4 && (
                <div className="mt-6 text-center">
                  <div className="text-6xl mb-3">üéâ</div>
                  <p className="text-2xl font-bold text-green-600 mb-4">–ú–æ–ª–æ–¥–µ—Ü!</p>
                  <Button onClick={() => setPuzzleMatches(0)} size="lg">
                    –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>

          <Card className="border-4 border-primary bg-white shadow-xl">
            <CardHeader>
              <CardTitle className="text-3xl text-center">üé® –†–∞—Å–∫—Ä–∞—Å–∫–∞</CardTitle>
              <CardDescription className="text-center text-lg">
                –°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è
              </CardDescription>
            </CardHeader>
            <CardContent className="flex items-center justify-center h-64">
              <div className="text-center">
                <div className="text-8xl mb-4">üñçÔ∏è</div>
                <p className="text-xl text-muted-foreground">
                  –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );

  return (
    <>
      {activeSection === 'home' && renderHome()}
      {activeSection === 'stories' && renderStories()}
      {activeSection === 'quiz' && renderQuiz()}
      {activeSection === 'games' && renderGames()}
    </>
  );
}
